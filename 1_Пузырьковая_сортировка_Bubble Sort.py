
# Пузырьковая сортировка (Bubble Sort)

'''
Пузырьковая сортировка — это один из самых простых и известных алгоритмов сортировки. 
Свое название алгоритм получил из-за того, что при каждом проходе по списку большие 
элементы "всплывают" на верх списка, как пузырьки воздуха в воде.
'''
# Теория пузырьковой сортировки

'''
Принцип работы:

    1. В списке элементов сравниваются два соседних элемента.
    2. Если текущий элемент больше следующего, они меняются местами.
    3. Этот процесс повторяется для всех пар соседних элементов в списке.
    4. После первого прохода самый большой элемент оказывается на последней позиции (он "всплыл").
    5. Процесс повторяется для всех элементов, но на каждом новом проходе количество элементов для 
    6. сравнения уменьшается, так как последний элемент уже отсортирован.
    7. Алгоритм продолжает работу, пока весь список не будет отсортирован.

Сложность алгоритма:

    Лучший случай (когда список уже отсортирован): O(n)
    Худший и средний случай: O(n²), где n — количество элементов в списке.

Алгоритм считается медленным на больших массивах, поскольку его время работы квадратично зависит 
от количества элементов.
'''

# Псевдокод пузырьковой сортировки:

'''
1. Повторять, пока не отсортирован:
    Для каждого элемента i от 0 до n-2:
        Если arr[i] > arr[i + 1], поменять arr[i] и arr[i + 1].
'''

# Пример работы алгоритма:
'''
Возьмем список [5, 3, 8, 4, 2].

1. Первый проход:

    Сравниваем 5 и 3, меняем их местами → [3, 5, 8, 4, 2]
    Сравниваем 5 и 8, оставляем как есть → [3, 5, 8, 4, 2]
    Сравниваем 8 и 4, меняем их местами → [3, 5, 4, 8, 2]
    Сравниваем 8 и 2, меняем их местами → [3, 5, 4, 2, 8]

    8 переместился в конец списка, он на своём месте.

2. Второй проход:

    Сравниваем 3 и 5, оставляем как есть → [3, 5, 4, 2, 8]
    Сравниваем 5 и 4, меняем их местами → [3, 4, 5, 2, 8]
    Сравниваем 5 и 2, меняем их местами → [3, 4, 2, 5, 8]

    5 переместился на своё место.

3. Третий проход:

    Сравниваем 3 и 4, оставляем как есть → [3, 4, 2, 5, 8]
    Сравниваем 4 и 2, меняем их местами → [3, 2, 4, 5, 8]

    4 переместился на своё место.

4. Четвёртый проход:

    Сравниваем 3 и 2, меняем их местами → [2, 3, 4, 5, 8]
    Теперь список отсортирован.

'''

# Реализация на Python:

'''
Давайте реализуем пузырьковую сортировку:
'''

def bubble_sort(arr):
    n = len(arr)
    # Проходим по всем элементам списка
    for i in range(n):
        swapped = False
        # Последние i элементов уже отсортированы, их можно не проверять
        for j in range(0, n-i-1):
            # Если текущий элемент больше следующего, меняем их местами
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        # Если на текущем проходе не было обменов, массив уже отсортирован
        if not swapped:
            break

# Пример использования
arr = [5, 3, 8, 4, 2]
bubble_sort(arr)
print("Отсортированный массив:", arr)

# Пояснение к коду:
'''
1. Внешний цикл проходит по всему списку, начиная с 0 до конца.

2. Внутренний цикл проходит по неотсортированной части списка, сравнивая и меняя местами элементы.

3. Внутри есть флаг swapped, который отслеживает, были ли изменения в текущем проходе. Если изменений
не было (флаг остался False), то список уже отсортирован, и можно завершить выполнение раньше.
'''

# Оптимизация пузырьковой сортировки

'''
Как видно, можно улучшить пузырьковую сортировку, введя проверку на то, были ли произведены обмены за 
проход (через флаг swapped). Если за проход обменов не было, значит, массив уже отсортирован, и можно 
прекратить работу алгоритма.
'''

# Преимущества и недостатки:

'''
Преимущества:

1. Простота: Алгоритм очень прост в реализации и понимании.

2. Работает на месте: Не требует дополнительной памяти, сортирует исходный массив.

3. Лучший случай O(n): Если список уже отсортирован, это можно быстро определить и завершить работу.


Недостатки:

1. Медленный на больших массивах: Время работы квадратично зависит от количества элементов O(n²).

2. Неэффективность: По сравнению с другими алгоритмами сортировки, такими как быстрая сортировка или 
сортировка слиянием, пузырьковая сортировка гораздо медленнее.

'''

# Вывод:

'''
Пузырьковая сортировка — это учебный алгоритм, который полезен для понимания основ сортировки и простых
алгоритмов. Однако для реальных приложений и больших массивов используются более эффективные алгоритмы.
'''
